@model eShop.Models.MasterItem

@{
    ViewBag.Title = "Add Barang";
    ViewBag.Current = "MasterItems";
}

@section Styles {
    @Styles.Render("~/style/mvcgrid")
    @Styles.Render("~/style/MvcDatalist")
    @Styles.Render("~/style/Select2")
}

<style>
    .tablegrid-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }
</style>

@Html.Partial("MvcDatalist/_Dialog")

<div class="content-wrapper">
    <section class="content">
        <div class="row">
            <div class="col-md-5">
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <i class="fa fa-plus"></i>
                        <h3 class="box-title">Add - Barang</h3>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body">
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.Id)
                            <div class="form-horizontal">
                                <div class="nav-tabs-custom">
                                    <ul class="nav nav-tabs">
                                        <li class="active"><a href="#tab_1" data-toggle="tab">General</a></li>
                                        <li><a href="#tab_2" data-toggle="tab">Image</a></li>

                                    </ul>


                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="tab-content">
                                        <div class="tab-pane active form-horizontal" id="tab_1">
                                            <div class="form-group">
                                                <div class="col-md-10">
                                                    @Html.LabelFor(model => model.Code)
                                                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                                                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-2 text-center">
                                                    @Html.LabelFor(model => model.Active)
                                                    <div class="checkbox text-center">
                                                        @Html.EditorFor(model => model.Active)
                                                        @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.MasterCategoryId)
                                                    @Html.DatalistFor(model => model.MasterCategoryId, new eShop.Models.MasterCategoryDatalist())
                                                    @Html.ValidationMessageFor(model => model.MasterCategoryId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.MasterBrandId)
                                                    @Html.DatalistFor(model => model.MasterBrandId, new eShop.Models.MasterBrandDatalist())
                                                    @Html.ValidationMessageFor(model => model.MasterBrandId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.MasterSupplierId)
                                                    @Html.DatalistFor(model => model.MasterSupplierId, new eShop.Models.MasterSupplierDatalist())
                                                    @Html.ValidationMessageFor(model => model.MasterSupplierId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.Name)
                                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12 hideable" id="InventoryPartType">
                                                    @Html.LabelFor(model => model.InventoryPartType)
                                                    @Html.EnumDropDownListFor(model => model.InventoryPartType, htmlAttributes: new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.InventoryPartType, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <div class="col-md-12">
                                                    @Html.LabelFor(model => model.Notes)
                                                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                                                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-12">
                                                    <div class="col-md-6 text-left">
                                                        <a href="#" id="cancel" class="btn btn-danger" style="margin-top:10px">
                                                            Cancel
                                                        </a>
                                                    </div>
                                                    <div class="col-md-6 text-right">
                                                        <input type="submit" value="Save" class="btn btn-primary" style="margin-top:10px" />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <!-- /.col -->

            <div class="col-md-7">
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <div class="col-md-2">
                            <i class="fa fa-info"></i>

                            <h3 class="box-title">Details</h3>
                        </div>
                        <div class="text-right col-md-10">
                            <button id="btnAdd" class="btn btn-success mx-1" href="@Url.Action("DetailsCreate", "MasterItems")">
                                <i class="fa fa-plus"></i> Add
                            </button>
                            <button id="DetailsBatchDelete" class="btn btn-danger mx-1">
                                <i class="fa fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body" style="overflow:auto; white-space: nowrap">
                        @Html.AjaxGrid(Url.Action("DetailsGrid", routeValues: new { Id = Html.ValueFor(model => model.Id) }), new { id = "data-table" })
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <!-- /.col -->
        </div>
    </section>
</div>
<div class="modal fade" id="viewModal" role="dialog" aria-hidden="true" data-backdrop="static">
    <div id="viewContainer">
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/mvcgrid")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/script/Select2")
    @Scripts.Render("~/bundles/unobtrusive")
    @Scripts.Render("~/bundles/MvcDatalist")
    @Scripts.Render("~/script/tableHeadFixer")
    @Scripts.Render("~/script/InputMask")

    <script>
        $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
        }

        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
        }
    </script>

    <script>
        $('.select2').select2();

        [].forEach.call(document.getElementsByClassName('datalist'), function (element) {
            new MvcDatalist(element);
        });

        [].forEach.call(document.getElementsByClassName('mvc-grid'), function (element) {
            new MvcGrid(element);
        });

        $('#btnAdd').click(function (event) {
            event.preventDefault();
            var url = $(this).attr("href") + "?masterItemId=" + $("input#Id").val();
            $.get(url, function (data) {
                $('#viewContainer').html(data);
                $('#viewModal').modal('show');

                [].forEach.call(document.getElementsByClassName('datalist2'), function (element) {
                    new MvcDatalist(element);
                });

                $('form').each(function () {
                    var $el = $(this);
                    $el.data('validator', null);
                    $.validator.unobtrusive.parse($el);
                });
            });
        });

        function CreateSuccess(data) {
            if (data !== "success") {
                $('#viewContainer').html(data);
                return;
            }
            $('#viewModal').modal('hide');
            $('#viewContainer').html("");

            var grid = new MvcGrid(document.querySelector('#data-table'));
            grid.reload();
        }

        function EditSuccess(data) {
            if (data !== "success") {
                $('#viewContainer').html(data);
                return;
            }
            $('#viewModal').modal('hide');
            $('#viewContainer').html("");

            var grid = new MvcGrid(document.querySelector('#data-table'));
            grid.reload();
        }

        var token = $('input[name="__RequestVerificationToken"]').val();
        var headers = {};
        headers['__RequestVerificationToken'] = token;

        $(document).ready(function ()
        {
            $("#DetailsBatchDelete").click(function ()
            {
                var selectedIDs = new Array();
                $('#data-table tbody tr').find('td:first :checkbox').each(function ()
                {
                    if ($(this).prop('checked'))
                    {
                        selectedIDs.push($(this).val());
                    }
                });

                if (selectedIDs.length <= 0)
                {
                    bootbox.alert("Pilih salah satu data yang akan dihapus.");
                }
                else
                {
                    bootbox.confirm("Apakah anda yakin akan menghapus " + selectedIDs.length + " data?", function (result)
                    {
                        if (result)
                        {
                            var options = {};
                            options.url = "/MasterItems/DetailsBatchDelete";
                            options.type = "POST";
                            options.headers = headers;
                            options.data = JSON.stringify(selectedIDs);
                            options.contentType = "application/json";
                            options.dataType = "json";
                            options.success = function (msg)
                            {
                                bootbox.alert(msg);

                                var grid = new MvcGrid(document.querySelector('#data-table'));
                                grid.reload();
                            };
                            options.error = function ()
                            {
                                bootbox.alert("Terjadi kesalahan saat menghapus.");
                            };
                            $.ajax(options);
                        }
                    });
                }
            });

            $("#cancel").click(function () {
                var data = { id: $("input#Id").val() };
                var options = {};
                options.url = "/MasterItems/Cancel";
                options.type = "POST";
                options.headers = headers;
                options.data = JSON.stringify(data);
                options.contentType = "application/json";
                options.dataType = "json";
                options.success = function (msg) {
                    window.location.href = '@Url.Action("Index", "MasterItems")';
                };
                options.error = function () {
                    window.location.href = '@Url.Action("Index", "MasterItems")';
                };
                $.ajax(options);
            });
        });

        document.addEventListener('reloadend', function (e)
        {
            $('#CheckAll').click(function ()
            {
                var checkedStatus = this.checked;
                $('#data-table tbody tr').find('td:first :checkbox').each(function ()
                {
                    $(this).prop('checked', checkedStatus);
                });
            });

            $('#data-table').on("click", ".edit-data", function (event)
            {
                event.preventDefault();
                var url = $(this).attr("href");
                $.get(url, function (data)
                {
                    $('#viewContainer').html(data);
                    $('#viewModal').modal('show');

                    [].forEach.call(document.getElementsByClassName('datalist2'), function (element)
                    {
                        new MvcDatalist(element);
                    });

                    $('form').each(function ()
                    {
                        var $el = $(this);
                        $el.data('validator', null);
                        $.validator.unobtrusive.parse($el);
                    });
                });
            });

            $('.fix-table').tableHeadFixer({ left: 2 });
        });
    </script>
}
